import telebot
import os
from dotenv import load_dotenv
import moviepy.editor as mp
from telebot import types
import tempfile
from concurrent.futures import ThreadPoolExecutor
import cv2
import numpy as np
from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip
import glob
import sys
import time
import logging
from collections import defaultdict
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_logs.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger('circle_bot')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not load_dotenv():
    logger.error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    sys.exit(1)

TOKEN = os.getenv('TOKEN')
if not TOKEN:
    logger.error("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    print("‚ùå –û—à–∏–±–∫–∞: TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ TOKEN=your_token_here")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ your_token_here –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    sys.exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω—Ç–∏-—Ñ–ª—É–¥–∞
FLOOD_LIMIT = 3  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
FLOOD_TIME = 60  # –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
user_messages = defaultdict(list)  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def check_flood(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥"""
    current_time = time.time()
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_messages[user_id] = [msg_time for msg_time in user_messages[user_id] 
                            if current_time - msg_time < FLOOD_TIME]
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_messages[user_id].append(current_time)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    return len(user_messages[user_id]) > FLOOD_LIMIT

try:
    bot = telebot.TeleBot(TOKEN)
    executor = ThreadPoolExecutor(max_workers=3)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = defaultdict(lambda: {
    "video_size": 384,
    "video_quality": "medium"  # –Ω–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
})
user_stats = defaultdict(lambda: {"processed_videos": 0, "total_size_mb": 0})

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = user_stats[user_id]
    return (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {stats['processed_videos']}\n"
            f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.2f} –ú–ë")

@bot.message_handler(commands=['settings'])
def settings_command(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
    sizes_btn = types.InlineKeyboardButton(
        "üéØ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ", 
        callback_data="show_sizes"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
    quality_btn = types.InlineKeyboardButton(
        "üé® –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", 
        callback_data="show_quality"
    )
    
    markup.add(sizes_btn, quality_btn)
    
    current_size = user_settings[message.from_user.id]["video_size"]
    current_quality = user_settings[message.from_user.id]["video_quality"]
    
    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üìê –†–∞–∑–º–µ—Ä: {current_size}x{current_size}\n"
        f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {current_quality}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "show_sizes")
def show_sizes(call):
    markup = types.InlineKeyboardMarkup()
    sizes = [
        (384, "384x384 (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)"), 
        (480, "480x480 (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π)"),
        (640, "640x640 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)")
    ]
    
    for size, text in sizes:
        callback_data = f"size_{size}"
        btn = types.InlineKeyboardButton(text=text, callback_data=callback_data)
        markup.add(btn)
    
    back_btn = types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    markup.add(back_btn)
    
    current_size = user_settings[call.from_user.id]["video_size"]
    bot.edit_message_text(
        f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {current_size}x{current_size}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞:\n"
        f"‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä, —Ç–µ–º –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
        f"‚Ä¢ –ß–µ–º –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "show_quality")
def show_quality(call):
    markup = types.InlineKeyboardMarkup()
    qualities = [
        ("high", "üéØ –í—ã—Å–æ–∫–æ–µ (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)"),
        ("medium", "‚ú® –°—Ä–µ–¥–Ω–µ–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"),
        ("low", "üöÄ –ù–∏–∑–∫–æ–µ (–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä)")
    ]
    
    for quality, text in qualities:
        callback_data = f"quality_{quality}"
        btn = types.InlineKeyboardButton(text=text, callback_data=callback_data)
        markup.add(btn)
    
    back_btn = types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    markup.add(back_btn)
    
    current_quality = user_settings[call.from_user.id]["video_quality"]
    bot.edit_message_text(
        f"üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {current_quality}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:\n"
        f"‚Ä¢ –í—ã—Å–æ–∫–æ–µ - –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å\n"
        f"‚Ä¢ –ù–∏–∑–∫–æ–µ - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('size_'))
def handle_size_selection(call):
    size = int(call.data.split('_')[1])
    user_settings[call.from_user.id]["video_size"] = size
    bot.answer_callback_query(
        call.id,
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä {size}x{size} –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–π –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏",
        show_alert=True
    )
    bot.edit_message_text(
        f"‚úÖ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏: {size}x{size}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ–≥–æ –∫—Ä—É–∂–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º.",
        call.message.chat.id,
        call.message.message_id
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–π –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏ –Ω–∞ {size}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('quality_'))
def handle_quality_selection(call):
    quality = call.data.split('_')[1]
    user_settings[call.from_user.id]["video_quality"] = quality
    bot.answer_callback_query(
        call.id,
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: {quality}",
        show_alert=True
    )
    settings_command(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def back_to_settings(call):
    settings_command(call.message)

@bot.message_handler(commands=['stats'])
def stats_command(message):
    stats_text = get_user_stats(message.from_user.id)
    bot.reply_to(message, stats_text)

def help_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    btn2 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    btn3 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.add(btn1, btn2, btn3)
    return markup

def help_message(message):
    bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∏–¥–µ–æ, –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ –∏ –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –∫—Ä—É–∂–æ–∫.\n'
                                      '1. –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥, –±–æ—Ç –µ–≥–æ –æ–±—Ä–µ–∂–µ—Ç\n'
                                      '2. –í–∏–¥–µ–æ –≤–µ—Å–∏—Ç –Ω–µ –±–æ–ª–µ–µ 12 –ú–ë\n'
                                      '3. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 640x640 –ø–∏–∫—Å–µ–ª–µ–π, –±–æ—Ç –µ–≥–æ –æ–±—Ä–µ–∂–µ—Ç\n'
                                      '4. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–∏–¥–µ–æ, –∞ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç\n\n'
                                      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                                      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
                                      'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
                                      '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫—É (–∫—Ä—É–∂–æ–∫).\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n'
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
        '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n'
        '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ!',
        reply_markup=help_markup()
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    help_message(message)

@bot.message_handler(content_types=['text'])
def analyze_text(message):
    text = message.text.lower()
    if '–ø–æ–º–æ—â—å' in text:
        help_message(message)
    elif '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' in text:
        settings_command(message)
    elif '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in text:
        stats_command(message)

def fast_resize_video(input_path, output_path, target_size, quality='medium'):
    """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenCV"""
    cap = cv2.VideoCapture(input_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ:")
    print(f"- –®–∏—Ä–∏–Ω–∞: {width}px")
    print(f"- –í—ã—Å–æ—Ç–∞: {height}px")
    print(f"- FPS: {fps}")
    print(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤: {frame_count}")
    
    # –î–ª—è –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏ –Ω—É–∂–µ–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    target_size = min(target_size, 640)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏
    new_size = target_size
    
    print(f"–°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ {new_size}x{new_size}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    temp_output = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False).name
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ–ø–∏—Å–∞—Ç–µ–ª—å
    out = cv2.VideoWriter(temp_output, fourcc, fps, (new_size, new_size))
    
    if not out.isOpened():
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ")
    
    frames_processed = 0
    progress_step = max(1, frame_count // 10)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10%
    
    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–∞–¥—Ä
            h, w = frame.shape[:2]
            size = min(h, w)
            x = (w - size) // 2
            y = (h - size) // 2
            frame = frame[y:y+size, x:x+size]
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            if size != new_size:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º INTER_AREA –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏ INTER_CUBIC –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
                interpolation = cv2.INTER_AREA if size > new_size else cv2.INTER_CUBIC
                frame = cv2.resize(frame, (new_size, new_size), interpolation=interpolation)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É
            if quality == 'high':
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 95]
            elif quality == 'medium':
                # –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ
                encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 85]
            else:  # low
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 75]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ –∫ –∫–∞–¥—Ä—É
            _, encoded_frame = cv2.imencode('.jpg', frame, encode_param)
            frame = cv2.imdecode(encoded_frame, 1)
            
            out.write(frame)
            frames_processed += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if frames_processed % progress_step == 0:
                progress = (frames_processed / frame_count) * 100
                print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {progress:.1f}%")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ–ø–∏—Å–∞—Ç–µ–ª—å
        out.release()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é ffmpeg
        print("–í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        import subprocess
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è ffmpeg
        if quality == 'high':
            crf = "18"  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        elif quality == 'medium':
            crf = "23"  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        else:  # low
            crf = "28"  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        command = [
            'ffmpeg', '-i', temp_output,
            '-c:v', 'libx264',
            '-preset', 'medium',
            '-crf', crf,
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            output_path
        ]
        
        subprocess.run(command, check=True, capture_output=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_size = os.path.getsize(output_path) / (1024 * 1024)  # –≤ –ú–ë
        print(f"–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_size:.2f} –ú–ë")
        
        return frames_processed
        
    finally:
        cap.release()
        out.release()
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_output):
            os.unlink(temp_output)

def process_video(input_path, output_path, target_size=384, quality='medium'):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏"""
    try:
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–∞–∑–º–µ—Ä={target_size}x{target_size}, –∫–∞—á–µ—Å—Ç–≤–æ={quality}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        clip = mp.VideoFileClip(input_path)
        duration = clip.duration
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        clip.close()

        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        temp_cut = None
        if duration > 60:
            print("–í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥, –æ–±—Ä–µ–∑–∞–µ–º...")
            temp_cut = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False).name
            ffmpeg_extract_subclip(input_path, 0, 60, targetname=temp_cut)
            current_input = temp_cut
            print("–û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            current_input = input_path

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é OpenCV
        print("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏...")
        frames_processed = fast_resize_video(current_input, output_path, target_size, quality)
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {frames_processed}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if temp_cut:
            os.unlink(temp_cut)
            print("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")

def cleanup_temp_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã moviepy
        temp_files = glob.glob("*TEMP_MPY_*")
        for temp_file in temp_files:
            try:
                os.remove(temp_file)
                print(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {temp_file}: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        patterns = ["*_resized.mp4", "sigma_video.mp4"]
        for pattern in patterns:
            files = glob.glob(pattern)
            for file in files:
                try:
                    os.remove(file)
                    print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {str(e)}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

@bot.message_handler(content_types=['video'])
def video(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
        if check_flood(user_id):
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ.")
            return

        file_size_mb = message.video.file_size / (1024 * 1024)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}), —Ä–∞–∑–º–µ—Ä: {file_size_mb:.2f} –ú–ë")
        print(f"\n–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats[user_id]["processed_videos"] += 1
        user_stats[user_id]["total_size_mb"] += file_size_mb

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if message.video.file_size > 12 * 1024 * 1024:  # 12 –ú–ë
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
            print("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
            bot.reply_to(message, "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 12 –ú–ë")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_size = user_settings[user_id]["video_size"]
        quality = user_settings[user_id]["video_quality"]
        
        bot.send_message(
            message.chat.id, 
            f'‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ\n'
            f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n'
            f'–ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
        )
        print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as input_file, \
                 tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as output_file:
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                print("–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ...")
                file_info = bot.get_file(message.video.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                input_file.write(downloaded_file)
                input_file.flush()
                print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ")
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                print("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
                future = executor.submit(process_video, input_file.name, output_file.name, target_size, quality)
                future.result()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
                with open(output_file.name, 'rb') as result_file:
                    bot.send_video_note(message.chat.id, result_file)
                print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.unlink(input_file.name)
                os.unlink(output_file.name)
                print("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                cleanup_temp_files()
                print("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}"
                print(error_msg)
                logger.error(error_msg)
            
    except Exception as e:
        error_message = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {error_message}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {error_message}")
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {error_message}')
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        cleanup_temp_files()

if __name__ == '__main__':
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_files()
        bot.infinity_polling()
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(error_msg)
        logger.critical(error_msg)
        bot.stop_polling()
        executor.shutdown()
