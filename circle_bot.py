import telebot
import os
from dotenv import load_dotenv
import moviepy.editor as mp
from telebot import types
import tempfile
from concurrent.futures import ThreadPoolExecutor
import cv2
import numpy as np
from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip
import glob
import sys
import time
import logging
from collections import defaultdict
from datetime import datetime
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_logs.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger('circle_bot')

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

def log_and_print(message, level=logging.INFO):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if level == logging.INFO:
        logger.info(message)
    elif level == logging.WARNING:
        logger.warning(message)
    elif level == logging.ERROR:
        logger.error(message)
    elif level == logging.CRITICAL:
        logger.critical(message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    emoji = {
        logging.INFO: "‚ÑπÔ∏è",
        logging.WARNING: "‚ö†Ô∏è",
        logging.ERROR: "‚ùå",
        logging.CRITICAL: "üö®"
    }
    print(f"{emoji.get(level, '')} {message}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not load_dotenv():
    logger.error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    sys.exit(1)

TOKEN = os.getenv('TOKEN')
if not TOKEN:
    logger.error("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    print("‚ùå –û—à–∏–±–∫–∞: TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ TOKEN=your_token_here")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ your_token_here –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    sys.exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω—Ç–∏-—Ñ–ª—É–¥–∞
FLOOD_LIMIT = 3  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
FLOOD_TIME = 60  # –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
user_messages = defaultdict(list)  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def check_flood(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥"""
    current_time = time.time()
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_messages[user_id] = [msg_time for msg_time in user_messages[user_id] 
                            if current_time - msg_time < FLOOD_TIME]
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_messages[user_id].append(current_time)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    return len(user_messages[user_id]) > FLOOD_LIMIT

try:
    bot = telebot.TeleBot(TOKEN)
    executor = ThreadPoolExecutor(max_workers=3)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = defaultdict(lambda: {
    "video_size": 384,
    "video_quality": "medium"  # –Ω–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
})
user_stats = defaultdict(lambda: {"processed_videos": 0, "total_size_mb": 0})

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = user_stats[user_id]
    stats_text = (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {stats['processed_videos']}\n"
                f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.2f} –ú–ë")
    
    log_and_print(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):\n{stats_text}")
    return stats_text

@bot.message_handler(commands=['stats'])
def stats_command(message):
    user = message.from_user
    user_id = user.id
    username = user.username or "Unknown"
    
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    if user_id not in user_stats:
        log_and_print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        stats_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!"
    else:
        stats = user_stats[user_id]
        stats_text = get_user_stats(user_id)
        log_and_print(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}):\n"
            f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {stats['processed_videos']}\n"
            f"- –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.2f} –ú–ë"
        )
    
    bot.reply_to(message, stats_text)

@bot.callback_query_handler(func=lambda call: call.data == "show_sizes")
def show_sizes(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ"""
    user = call.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    sizes = [384, 480, 568, 640]
    size_buttons = []
    
    current_size = user_settings[call.from_user.id]["video_size"]
    
    for size in sizes:
        marker = "‚úÖ" if size == current_size else ""
        btn = types.InlineKeyboardButton(
            f"{marker} {size}x{size}", 
            callback_data=f"size_{size}"
        )
        size_buttons.append(btn)
    
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    markup.add(*size_buttons, back_btn)
    
    bot.edit_message_text(
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {current_size}x{current_size}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "show_quality")
def show_quality(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"""
    user = call.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    qualities = {
        'high': 'üéØ –í—ã—Å–æ–∫–æ–µ',
        'medium': 'üéØ –°—Ä–µ–¥–Ω–µ–µ',
        'low': 'üéØ –ù–∏–∑–∫–æ–µ'
    }
    
    current_quality = user_settings[call.from_user.id]["video_quality"]
    quality_buttons = []
    
    for quality_key, quality_name in qualities.items():
        marker = "‚úÖ" if quality_key == current_quality else ""
        btn = types.InlineKeyboardButton(
            f"{marker} {quality_name}", 
            callback_data=f"quality_{quality_key}"
        )
        quality_buttons.append(btn)
    
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    markup.add(*quality_buttons, back_btn)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    current_quality_text = {
        'high': '–≤—ã—Å–æ–∫–æ–µ',
        'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
        'low': '–Ω–∏–∑–∫–æ–µ'
    }.get(current_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
    
    bot.edit_message_text(
        f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {current_quality_text}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("size_"))
def change_size(call):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ"""
    try:
        user = call.from_user
        new_size = int(call.data.split('_')[1])
        old_size = user_settings[user.id]["video_size"]
        
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {old_size}x{old_size} ‚Üí {new_size}x{new_size}")
        
        user_settings[user.id]["video_size"] = new_size
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        show_sizes(call)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.answer_callback_query(
            call.id,
            f"‚úÖ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_size}x{new_size}",
            show_alert=True
        )
        
        log_and_print(f"–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_msg, logging.ERROR)
        bot.answer_callback_query(call.id, f"‚ùå {error_msg}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith("quality_"))
def change_quality(call):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"""
    try:
        user = call.from_user
        new_quality = call.data.split('_')[1]
        old_quality = user_settings[user.id]["video_quality"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        quality_text = {
            'high': '–≤—ã—Å–æ–∫–æ–µ',
            'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
            'low': '–Ω–∏–∑–∫–æ–µ'
        }
        old_quality_text = quality_text.get(old_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
        new_quality_text = quality_text.get(new_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
        
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –º–µ–Ω—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {old_quality_text} ‚Üí {new_quality_text}")
        
        user_settings[user.id]["video_quality"] = new_quality
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        show_quality(call)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.answer_callback_query(
            call.id,
            f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_quality_text}",
            show_alert=True
        )
        
        log_and_print(f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_msg, logging.ERROR)
        bot.answer_callback_query(call.id, f"‚ùå {error_msg}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def back_to_settings(call):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = call.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    settings_command(call.message)

@bot.message_handler(commands=['settings'])
def settings_command(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id not in user_settings:
        user_settings[user.id] = {
            "video_size": 384,
            "video_quality": "medium"
        }
        log_and_print(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
    sizes_btn = types.InlineKeyboardButton(
        "üéØ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ", 
        callback_data="show_sizes"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
    quality_btn = types.InlineKeyboardButton(
        "üé® –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", 
        callback_data="show_quality"
    )
    
    markup.add(sizes_btn, quality_btn)
    
    current_size = user_settings[user.id]["video_size"]
    current_quality = user_settings[user.id]["video_quality"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_text = {
        'high': '–≤—ã—Å–æ–∫–æ–µ',
        'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
        'low': '–Ω–∏–∑–∫–æ–µ'
    }.get(current_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
    
    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üìê –†–∞–∑–º–µ—Ä: {current_size}x{current_size}\n"
        f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=markup
    )
    
    log_and_print(
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}):\n"
        f"- –†–∞–∑–º–µ—Ä: {current_size}x{current_size}\n"
        f"- –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}"
    )

@bot.message_handler(commands=['start'])
def start_message(message):
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    bot.send_message(
        message.chat.id,
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫—É (–∫—Ä—É–∂–æ–∫).\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n'
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
        '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n'
        '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ!',
        reply_markup=help_markup()
    )

def help_markup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    btn2 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    btn3 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.add(btn1, btn2, btn3)
    log_and_print("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é")
    return markup

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")
    help_message(message)

def help_message(message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
    
    help_text = ('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∏–¥–µ–æ, –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ –∏ –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –∫—Ä—É–∂–æ–∫.\n'
                '1. –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥, –±–æ—Ç –µ–≥–æ –æ–±—Ä–µ–∂–µ—Ç\n'
                '2. –í–∏–¥–µ–æ –≤–µ—Å–∏—Ç –Ω–µ –±–æ–ª–µ–µ 12 –ú–ë\n'
                '3. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 640x640 –ø–∏–∫—Å–µ–ª–µ–π, –±–æ—Ç –µ–≥–æ –æ–±—Ä–µ–∂–µ—Ç\n'
                '4. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–∏–¥–µ–æ, –∞ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç\n\n'
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
                '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    
    bot.send_message(message.chat.id, help_text)
    log_and_print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} (ID: {user.id})")

@bot.message_handler(content_types=['text'])
def analyze_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = message.from_user
    text = message.text.lower()
    
    log_and_print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}): {text}")
    
    if '–ø–æ–º–æ—â—å' in text:
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é")
        help_message(message)
    elif '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' in text:
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é")
        settings_command(message)
    elif '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in text:
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é")
        stats_command(message)
    else:
        log_and_print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}): {text}")
        help_message(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ

@bot.message_handler(commands=['start'])
def start_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = ('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫—É (–∫—Ä—É–∂–æ–∫).\n\n'
                   '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n'
                   '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
                   'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
                   '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n'
                   '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ!')
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=help_markup()
    )
    log_and_print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} (ID: {user.id})")

def resize_frame_with_padding(frame, target_size):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–¥—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤"""
    height, width = frame.shape[:2]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    scale = min(target_size / width, target_size / height)
    new_width = int(width * scale)
    new_height = int(height * scale)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    resized = cv2.resize(frame, (new_width, new_height), interpolation=cv2.INTER_LANCZOS4)
    
    # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–∞–¥—Ä –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    square = np.zeros((target_size, target_size, 3), dtype=np.uint8)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    x_offset = (target_size - new_width) // 2
    y_offset = (target_size - new_height) // 2
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    square[y_offset:y_offset + new_height, x_offset:x_offset + new_width] = resized
    
    return square

def fast_resize_video(input_path, output_path, target_size, quality='medium'):
    """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenCV"""
    log_and_print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        cap = cv2.VideoCapture(input_path)
        if not cap.isOpened():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = int(cap.get(cv2.CAP_PROP_FPS))
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        
        log_and_print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {width}x{height}, {fps} FPS, {total_frames} –∫–∞–¥—Ä–æ–≤")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        if quality == 'high':
            bitrate = '2M'
            crf = 18
        elif quality == 'medium':
            bitrate = '1M'
            crf = 23
        else:  # low
            bitrate = '500k'
            crf = 28
            
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é OpenCV
        temp_output = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False).name
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(temp_output, fourcc, fps, (target_size, target_size))
        
        if not out.isOpened():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
        
        frames_processed = 0
        start_time = time.time()
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
                
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            resized_frame = resize_frame_with_padding(frame, target_size)
            out.write(resized_frame)
            
            frames_processed += 1
            if frames_processed % 30 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
                progress = (frames_processed / total_frames) * 100
                elapsed_time = time.time() - start_time
                fps_processing = frames_processed / elapsed_time
                log_and_print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {frames_processed}/{total_frames} –∫–∞–¥—Ä–æ–≤ ({progress:.1f}%), {fps_processing:.1f} FPS")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã OpenCV
        cap.release()
        out.release()
        
        log_and_print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ OpenCV –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {frames_processed} –∫–∞–¥—Ä–æ–≤ –∑–∞ {time.time() - start_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ H.264 —Å –ø–æ–º–æ—â—å—é ffmpeg –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        log_and_print("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ H.264...")
        
        ffmpeg_cmd = [
            'ffmpeg',
            '-i', temp_output,
            '-c:v', 'libx264',
            '-preset', 'medium',
            '-crf', str(crf),
            '-maxrate', bitrate,
            '-bufsize', bitrate,
            '-movflags', '+faststart',
            '-y',
            output_path
        ]
        
        process = subprocess.Popen(
            ffmpeg_cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        _, stderr = process.communicate()
        
        if process.returncode != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {stderr.decode()}")
            
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_output)
        
        if not os.path.exists(output_path) or os.path.getsize(output_path) == 0:
            raise Exception("–ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        log_and_print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ H.264")
        return True
        
    except Exception as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}", logging.ERROR)
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'cap' in locals():
            cap.release()
        if 'out' in locals():
            out.release()
        if 'temp_output' in locals() and os.path.exists(temp_output):
            try:
                os.unlink(temp_output)
            except:
                pass
        return False

def process_video(message, input_file, output_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        user = message.from_user
        log_and_print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        target_size = user_settings[user_id]["video_size"]
        quality = user_settings[user_id]["video_quality"]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        success = fast_resize_video(input_file, output_file, target_size, quality)
        if not success:
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
            
        log_and_print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
        return True
        
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_message, logging.ERROR)
        bot.reply_to(message, f"‚ùå {error_message}")
        return False

@bot.message_handler(content_types=['video'])
def video(message):
    try:
        user = message.from_user
        user_id = user.id
        username = user.username or "Unknown"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
        if check_flood(user_id):
            log_and_print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})", logging.WARNING)
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size_mb = message.video.file_size / (1024 * 1024)
        if file_size_mb > 12:
            log_and_print(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.2f} –ú–ë", logging.WARNING)
            bot.reply_to(message, "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 12 –ú–ë")
            return
            
        log_and_print(
            f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})\n"
            f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë"
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_size = user_settings[user_id]["video_size"]
        quality = user_settings[user_id]["video_quality"]
        
        log_and_print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ä–∞–∑–º–µ—Ä={target_size}, –∫–∞—á–µ—Å—Ç–≤–æ={quality}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        quality_text = {
            'high': '–≤—ã—Å–æ–∫–æ–µ',
            'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
            'low': '–Ω–∏–∑–∫–æ–µ'
        }.get(quality, '—Å—Ä–µ–¥–Ω–µ–µ')
        
        processing_msg = bot.reply_to(
            message,
            f"‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ\n\n"
            f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
            f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as input_file, \
             tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as output_file:
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                log_and_print("–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ...")
                file_info = bot.get_file(message.video.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                input_file.write(downloaded_file)
                input_file.flush()
                log_and_print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                bot.edit_message_text(
                    f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
                    f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
                    f"üì• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                    f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
                log_and_print("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
                success = process_video(message, input_file.name, output_file.name)
                
                if not success:
                    raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if not os.path.exists(output_file.name) or os.path.getsize(output_file.name) == 0:
                    raise Exception("–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                bot.edit_message_text(
                    f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
                    f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
                    f"üì• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                    f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                log_and_print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
                with open(output_file.name, 'rb') as video:
                    bot.send_video_note(message.chat.id, video)
                log_and_print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if user_id not in user_stats:
                    user_stats[user_id] = {"processed_videos": 0, "total_size_mb": 0}
                user_stats[user_id]["processed_videos"] += 1
                user_stats[user_id]["total_size_mb"] += file_size_mb
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                bot.edit_message_text(
                    f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
                    f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
                    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"üé• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {user_stats[user_id]['processed_videos']}\n"
                    f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {user_stats[user_id]['total_size_mb']:.1f} –ú–ë",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                
            except Exception as e:
                error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
                log_and_print(error_message, logging.ERROR)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                try:
                    bot.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
                        chat_id=processing_msg.chat.id,
                        message_id=processing_msg.message_id
                    )
                except:
                    bot.reply_to(message, f"‚ùå {error_message}")
            
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.unlink(input_file.name)
                    os.unlink(output_file.name)
                    cleanup_temp_files()
                except Exception as e:
                    log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}", logging.ERROR)
    
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_message, logging.ERROR)
        bot.reply_to(message, f"‚ùå {error_message}")

def cleanup_temp_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã moviepy
        temp_files = glob.glob("*TEMP_MPY_*")
        for temp_file in temp_files:
            try:
                os.remove(temp_file)
                log_and_print(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            except Exception as e:
                log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {temp_file}: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        patterns = ["*_resized.mp4", "sigma_video.mp4"]
        for pattern in patterns:
            files = glob.glob(pattern)
            for file in files:
                try:
                    os.remove(file)
                    log_and_print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
                except Exception as e:
                    log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {str(e)}")
    except Exception as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}", logging.ERROR)

if __name__ == '__main__':
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_files()
        bot.infinity_polling()
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(error_msg)
        logger.critical(error_msg)
        bot.stop_polling()
        executor.shutdown()
