import telebot
import os
from dotenv import load_dotenv
import moviepy.editor as mp
from telebot import types
import tempfile
from concurrent.futures import ThreadPoolExecutor
import cv2
import numpy as np
from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip
import glob
import sys
import time
import logging
from collections import defaultdict
from datetime import datetime
import subprocess
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_logs.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger('circle_bot')

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

def log_and_print(message, level=logging.INFO):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if level == logging.INFO:
        logger.info(message)
    elif level == logging.WARNING:
        logger.warning(message)
    elif level == logging.ERROR:
        logger.error(message)
    elif level == logging.CRITICAL:
        logger.critical(message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    emoji = {
        logging.INFO: "‚ÑπÔ∏è",
        logging.WARNING: "‚ö†Ô∏è",
        logging.ERROR: "‚ùå",
        logging.CRITICAL: "üö®"
    }
    print(f"{emoji.get(level, '')} {message}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not load_dotenv():
    logger.error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    sys.exit(1)

TOKEN = os.getenv('TOKEN')
if not TOKEN:
    logger.error("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    print("‚ùå –û—à–∏–±–∫–∞: TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ TOKEN=your_token_here")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ your_token_here –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    sys.exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω—Ç–∏-—Ñ–ª—É–¥–∞
FLOOD_LIMIT = 3  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
FLOOD_TIME = 60  # –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
user_messages = defaultdict(list)  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def check_flood(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥"""
    current_time = time.time()
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_messages[user_id] = [msg_time for msg_time in user_messages[user_id] 
                            if current_time - msg_time < FLOOD_TIME]
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_messages[user_id].append(current_time)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    return len(user_messages[user_id]) > FLOOD_LIMIT

try:
    bot = telebot.TeleBot(TOKEN)
    executor = ThreadPoolExecutor(max_workers=3)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    sys.exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
ERROR_MESSAGES = {
    'file_too_large': "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 12 –ú–ë",
    'processing_error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ",
    'empty_file': "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª",
    'flood_control': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ",
    'telegram_error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram",
    'download_error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ",
    'conversion_error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ",
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
DEFAULT_SETTINGS = {
    "video_size": 384,
    "video_quality": "medium"
}

QUALITY_SETTINGS = {
    'high': {'bitrate': '2M', 'preset': 'medium'},
    'medium': {'bitrate': '1M', 'preset': 'faster'},
    'low': {'bitrate': '500k', 'preset': 'veryfast'}
}

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram API
def safe_edit_message(bot, message_id, chat_id, text, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.edit_message_text(
            text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=reply_markup
        )
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" not in str(e):
            log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", logging.WARNING)

def safe_send_message(bot, chat_id, text, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return bot.send_message(chat_id, text, reply_markup=reply_markup)
    except telebot.apihelper.ApiTelegramException as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", logging.ERROR)
        return None

def safe_reply_to(bot, message, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return bot.reply_to(message, text)
    except telebot.apihelper.ApiTelegramException as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}", logging.ERROR)
        return None

def safe_answer_callback(bot, callback_id, text, show_alert=False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.answer_callback_query(callback_id, text, show_alert=show_alert)
    except telebot.apihelper.ApiTelegramException as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {str(e)}", logging.ERROR)

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def ensure_temp_dir():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    temp_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'temp')
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)
    return temp_dir

def cleanup_temp_files():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        temp_dir = ensure_temp_dir()
        for filename in os.listdir(temp_dir):
            file_path = os.path.join(temp_dir, filename)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
            except Exception as e:
                log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {str(e)}", logging.WARNING)
        log_and_print("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}", logging.ERROR)

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
def get_video_info(video_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
    try:
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
            
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = int(cap.get(cv2.CAP_PROP_FPS))
        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        duration = frame_count / fps if fps > 0 else 0
        
        cap.release()
        return {
            'width': width,
            'height': height,
            'fps': fps,
            'frame_count': frame_count,
            'duration': duration
        }
    except Exception as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {str(e)}", logging.ERROR)
        return None

def validate_video(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    try:
        file_size_mb = message.video.file_size / (1024 * 1024)
        if file_size_mb > 12:
            safe_reply_to(bot, message, ERROR_MESSAGES['file_too_large'])
            log_and_print(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.2f} –ú–ë", logging.WARNING)
            return False
            
        duration = message.video.duration
        if duration > 60:
            safe_reply_to(bot, message, "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 60 —Å–µ–∫—É–Ω–¥")
            log_and_print(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {duration} —Å–µ–∫—É–Ω–¥", logging.WARNING)
            return False
            
        return True
    except Exception as e:
        log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∏–¥–µ–æ: {str(e)}", logging.ERROR)
        return False

def get_user_settings(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    if user_id not in user_settings:
        user_settings[user_id] = DEFAULT_SETTINGS.copy()
        log_and_print(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    return user_settings[user_id]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = defaultdict(lambda: DEFAULT_SETTINGS.copy())
user_stats = defaultdict(lambda: {"processed_videos": 0, "total_size_mb": 0})

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = user_stats[user_id]
    stats_text = (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {stats['processed_videos']}\n"
                f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.2f} –ú–ë")
    
    log_and_print(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):\n{stats_text}")
    return stats_text

@bot.message_handler(commands=['stats'])
def stats_command(message):
    user = message.from_user
    user_id = user.id
    username = user.username or "Unknown"
    
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    if user_id not in user_stats:
        log_and_print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        stats_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!"
    else:
        stats = user_stats[user_id]
        stats_text = get_user_stats(user_id)
        log_and_print(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}):\n"
            f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {stats['processed_videos']}\n"
            f"- –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.2f} –ú–ë"
        )
    
    bot.reply_to(message, stats_text)

@bot.callback_query_handler(func=lambda call: call.data == "show_sizes")
def show_sizes(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ"""
    user = call.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    sizes = [384, 480, 568, 640]
    size_buttons = []
    
    current_size = user_settings[call.from_user.id]["video_size"]
    
    for size in sizes:
        marker = "‚úÖ" if size == current_size else ""
        btn = types.InlineKeyboardButton(
            f"{marker} {size}x{size}", 
            callback_data=f"size_{size}"
        )
        size_buttons.append(btn)
    
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    markup.add(*size_buttons, back_btn)
    
    bot.edit_message_text(
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {current_size}x{current_size}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "show_quality")
def show_quality(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"""
    user = call.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    qualities = {
        'high': 'üéØ –í—ã—Å–æ–∫–æ–µ',
        'medium': 'üéØ –°—Ä–µ–¥–Ω–µ–µ',
        'low': 'üéØ –ù–∏–∑–∫–æ–µ'
    }
    
    current_quality = user_settings[call.from_user.id]["video_quality"]
    quality_buttons = []
    
    for quality_key, quality_name in qualities.items():
        marker = "‚úÖ" if quality_key == current_quality else ""
        btn = types.InlineKeyboardButton(
            f"{marker} {quality_name}", 
            callback_data=f"quality_{quality_key}"
        )
        quality_buttons.append(btn)
    
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    markup.add(*quality_buttons, back_btn)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    current_quality_text = {
        'high': '–≤—ã—Å–æ–∫–æ–µ',
        'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
        'low': '–Ω–∏–∑–∫–æ–µ'
    }.get(current_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
    
    bot.edit_message_text(
        f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {current_quality_text}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("size_"))
def change_size(call):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ"""
    try:
        user = call.from_user
        new_size = int(call.data.split('_')[1])
        old_size = user_settings[user.id]["video_size"]
        
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {old_size}x{old_size} ‚Üí {new_size}x{new_size}")
        
        user_settings[user.id]["video_size"] = new_size
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        show_sizes(call)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.answer_callback_query(
            call.id,
            f"‚úÖ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_size}x{new_size}",
            show_alert=True
        )
        
        log_and_print(f"–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_msg, logging.ERROR)
        bot.answer_callback_query(call.id, f"‚ùå {error_msg}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith("quality_"))
def change_quality(call):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"""
    try:
        user = call.from_user
        new_quality = call.data.split('_')[1]
        old_quality = user_settings[user.id]["video_quality"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        quality_text = {
            'high': '–≤—ã—Å–æ–∫–æ–µ',
            'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
            'low': '–Ω–∏–∑–∫–æ–µ'
        }
        old_quality_text = quality_text.get(old_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
        new_quality_text = quality_text.get(new_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
        
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –º–µ–Ω—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {old_quality_text} ‚Üí {new_quality_text}")
        
        user_settings[user.id]["video_quality"] = new_quality
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        show_quality(call)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.answer_callback_query(
            call.id,
            f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_quality_text}",
            show_alert=True
        )
        
        log_and_print(f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_msg, logging.ERROR)
        bot.answer_callback_query(call.id, f"‚ùå {error_msg}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def back_to_settings(call):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = call.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    settings_command(call.message)

@bot.message_handler(commands=['settings'])
def settings_command(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id not in user_settings:
        user_settings[user.id] = DEFAULT_SETTINGS.copy()
        log_and_print(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
    sizes_btn = types.InlineKeyboardButton(
        "üéØ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ", 
        callback_data="show_sizes"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
    quality_btn = types.InlineKeyboardButton(
        "üé® –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", 
        callback_data="show_quality"
    )
    
    markup.add(sizes_btn, quality_btn)
    
    current_size = user_settings[user.id]["video_size"]
    current_quality = user_settings[user.id]["video_quality"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_text = {
        'high': '–≤—ã—Å–æ–∫–æ–µ',
        'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
        'low': '–Ω–∏–∑–∫–æ–µ'
    }.get(current_quality, '—Å—Ä–µ–¥–Ω–µ–µ')
    
    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üìê –†–∞–∑–º–µ—Ä: {current_size}x{current_size}\n"
        f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=markup
    )
    
    log_and_print(
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}):\n"
        f"- –†–∞–∑–º–µ—Ä: {current_size}x{current_size}\n"
        f"- –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}"
    )

@bot.message_handler(commands=['start'])
def start_message(message):
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    bot.send_message(
        message.chat.id,
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫—É (–∫—Ä—É–∂–æ–∫).\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n'
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
        '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n'
        '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ!',
        reply_markup=help_markup()
    )

def help_markup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    btn2 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    btn3 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.add(btn1, btn2, btn3)
    log_and_print("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é")
    return markup

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")
    help_message(message)

def help_message(message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
    
    help_text = ('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∏–¥–µ–æ, –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ –∏ –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –∫—Ä—É–∂–æ–∫.\n'
                '1. –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥, –±–æ—Ç –µ–≥–æ –æ–±—Ä–µ–∂–µ—Ç\n'
                '2. –í–∏–¥–µ–æ –≤–µ—Å–∏—Ç –Ω–µ –±–æ–ª–µ–µ 12 –ú–ë\n'
                '3. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 640x640 –ø–∏–∫—Å–µ–ª–µ–π, –±–æ—Ç –µ–≥–æ –æ–±—Ä–µ–∂–µ—Ç\n'
                '4. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–∏–¥–µ–æ, –∞ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç\n\n'
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
                '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    
    bot.send_message(message.chat.id, help_text)
    log_and_print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} (ID: {user.id})")

@bot.message_handler(content_types=['text'])
def analyze_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = message.from_user
    text = message.text.lower()
    
    log_and_print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}): {text}")
    
    if '–ø–æ–º–æ—â—å' in text:
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é")
        help_message(message)
    elif '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' in text:
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é")
        settings_command(message)
    elif '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in text:
        log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é")
        stats_command(message)
    else:
        log_and_print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}): {text}")
        help_message(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ

@bot.message_handler(commands=['start'])
def start_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    log_and_print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = ('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫—É (–∫—Ä—É–∂–æ–∫).\n\n'
                   '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n'
                   '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞\n'
                   'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
                   '‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n'
                   '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ!')
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=help_markup()
    )
    log_and_print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} (ID: {user.id})")

def process_video(message, input_file, output_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        user = message.from_user
        log_and_print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = get_video_info(input_file)
        if not video_info:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
            
        log_and_print(
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ:\n"
            f"- –®–∏—Ä–∏–Ω–∞: {video_info['width']}px\n"
            f"- –í—ã—Å–æ—Ç–∞: {video_info['height']}px\n"
            f"- FPS: {video_info['fps']}\n"
            f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤: {video_info['frame_count']}"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = get_user_settings(user.id)
        target_size = settings["video_size"]
        quality = settings["video_quality"]
        quality_params = QUALITY_SETTINGS[quality]
        
        log_and_print(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–∞–∑–º–µ—Ä={target_size}x{target_size}, –∫–∞—á–µ—Å—Ç–≤–æ={quality}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_dir = ensure_temp_dir()
        temp_output = os.path.join(temp_dir, f"temp_output_{int(time.time())}.mp4")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
            cap = cv2.VideoCapture(input_file)
            if not cap.isOpened():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            out = cv2.VideoWriter(
                temp_output,
                fourcc,
                video_info['fps'],
                (target_size, target_size)
            )
            
            if not out.isOpened():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
            
            frame_count = video_info['frame_count']
            frames_processed = 0
            start_time = time.time()
            last_progress = 0
            
            while True:
                ret, frame = cap.read()
                if not ret:
                    break
                    
                frames_processed += 1
                current_progress = (frames_processed / frame_count) * 100
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10%
                if current_progress - last_progress >= 10:
                    elapsed_time = time.time() - start_time
                    fps = frames_processed / elapsed_time if elapsed_time > 0 else 0
                    log_and_print(
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {frames_processed}/{frame_count} –∫–∞–¥—Ä–æ–≤ "
                        f"({current_progress:.1f}%), {fps:.1f} FPS"
                    )
                    last_progress = current_progress
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                h, w = frame.shape[:2]
                if h > w:
                    new_h = int(h * target_size / w)
                    frame = cv2.resize(frame, (target_size, new_h))
                    # –û–±—Ä–µ–∑–∞–µ–º —Ü–µ–Ω—Ç—Ä
                    start = (new_h - target_size) // 2
                    frame = frame[start:start + target_size, :target_size]
                else:
                    new_w = int(w * target_size / h)
                    frame = cv2.resize(frame, (new_w, target_size))
                    # –û–±—Ä–µ–∑–∞–µ–º —Ü–µ–Ω—Ç—Ä
                    start = (new_w - target_size) // 2
                    frame = frame[:target_size, start:start + target_size]
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
                mask = np.zeros((target_size, target_size), dtype=np.uint8)
                cv2.circle(
                    mask,
                    (target_size // 2, target_size // 2),
                    target_size // 2,
                    255,
                    -1
                )
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
                frame_channels = cv2.split(frame)
                masked_channels = [
                    cv2.bitwise_and(channel, channel, mask=mask)
                    for channel in frame_channels
                ]
                frame = cv2.merge(masked_channels)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä
                out.write(frame)
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            cap.release()
            out.release()
            
            elapsed_time = time.time() - start_time
            fps = frame_count / elapsed_time if elapsed_time > 0 else 0
            log_and_print(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ OpenCV –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤ –∑–∞ {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥"
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ H.264 —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            log_and_print("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ H.264...")
            
            ffmpeg_cmd = [
                'ffmpeg',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                '-i', temp_output,  # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                '-c:v', 'libx264',  # –ö–æ–¥–µ–∫ H.264
                '-preset', quality_params['preset'],  # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                '-b:v', quality_params['bitrate'],  # –ë–∏—Ç—Ä–µ–π—Ç
                '-movflags', '+faststart',  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±
                output_file  # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            ]
            
            result = subprocess.run(
                ffmpeg_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            if result.returncode != 0:
                raise Exception(
                    f"–û—à–∏–±–∫–∞ FFmpeg: {result.stderr.decode('utf-8')}"
                )
            
            log_and_print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ H.264")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not os.path.exists(output_file):
                raise Exception("–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                
            file_size = os.path.getsize(output_file)
            if file_size == 0:
                raise Exception("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")
                
            file_size_mb = file_size / (1024 * 1024)
            log_and_print(f"–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë")
            
            return True
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if os.path.exists(temp_output):
                    os.unlink(temp_output)
            except Exception as e:
                log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}", logging.WARNING)
                
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_message, logging.ERROR)
        safe_reply_to(bot, message, f"‚ùå {error_message}")
        return False

@bot.message_handler(content_types=['video'])
def video(message):
    try:
        user = message.from_user
        user_id = user.id
        username = user.username or "Unknown"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
        if check_flood(user_id):
            log_and_print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})", logging.WARNING)
            safe_reply_to(bot, message, ERROR_MESSAGES['flood_control'])
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        if not validate_video(message):
            return
            
        log_and_print(
            f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})\n"
            f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {message.video.file_size / (1024 * 1024):.2f} –ú–ë"
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = get_user_settings(user_id)
        target_size = settings["video_size"]
        quality = settings["video_quality"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_text = {
            'high': '–≤—ã—Å–æ–∫–æ–µ',
            'medium': '—Å—Ä–µ–¥–Ω–µ–µ',
            'low': '–Ω–∏–∑–∫–æ–µ'
        }.get(quality, '—Å—Ä–µ–¥–Ω–µ–µ')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = safe_reply_to(
            bot,
            message,
            f"‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ\n\n"
            f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
            f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        if not processing_msg:
            return
        
        log_and_print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ä–∞–∑–º–µ—Ä={target_size}, –∫–∞—á–µ—Å—Ç–≤–æ={quality}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_dir = ensure_temp_dir()
        input_path = os.path.join(temp_dir, f"input_{int(time.time())}.mp4")
        output_path = os.path.join(temp_dir, f"output_{int(time.time())}.mp4")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            log_and_print("–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ...")
            try:
                file_info = bot.get_file(message.video.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                with open(input_path, 'wb') as f:
                    f.write(downloaded_file)
                log_and_print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ")
            except Exception as e:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            safe_edit_message(
                bot,
                processing_msg.message_id,
                processing_msg.chat.id,
                f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ\n\n"
                f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
                f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
                f"üì• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è..."
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            log_and_print("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
            success = process_video(message, input_path, output_path)
            
            if not success:
                raise Exception(ERROR_MESSAGES['processing_error'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not os.path.exists(output_path) or os.path.getsize(output_path) == 0:
                raise Exception(ERROR_MESSAGES['empty_file'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            safe_edit_message(
                bot,
                processing_msg.message_id,
                processing_msg.chat.id,
                f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ\n\n"
                f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
                f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
                f"üì• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            log_and_print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            with open(output_path, 'rb') as video:
                sent = bot.send_video_note(message.chat.id, video)
                if not sent:
                    raise Exception(ERROR_MESSAGES['telegram_error'])
            
            log_and_print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if user_id not in user_stats:
                user_stats[user_id] = {"processed_videos": 0, "total_size_mb": 0}
            user_stats[user_id]["processed_videos"] += 1
            user_stats[user_id]["total_size_mb"] += message.video.file_size / (1024 * 1024)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            safe_edit_message(
                bot,
                processing_msg.message_id,
                processing_msg.chat.id,
                f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n\n"
                f"üìê –†–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞: {target_size}x{target_size}\n"
                f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n\n"
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üé• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {user_stats[user_id]['processed_videos']}\n"
                f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {user_stats[user_id]['total_size_mb']:.1f} –ú–ë"
            )
            
        except Exception as e:
            error_message = str(e)
            log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {error_message}", logging.ERROR)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if processing_msg:
                safe_edit_message(
                    bot,
                    processing_msg.message_id,
                    processing_msg.chat.id,
                    f"‚ùå {error_message}"
                )
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                for path in [input_path, output_path]:
                    if os.path.exists(path):
                        os.unlink(path)
                log_and_print("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                log_and_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}", logging.WARNING)
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            cleanup_temp_files()
            
    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
        log_and_print(error_message, logging.ERROR)
        safe_reply_to(bot, message, f"‚ùå {error_message}")

if __name__ == '__main__':
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_files()
        bot.infinity_polling()
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(error_msg)
        logger.critical(error_msg)
        bot.stop_polling()
        executor.shutdown()
